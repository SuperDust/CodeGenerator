@using System
@using System.Collections.Generic
@using System.IO
@using System.Linq
@using SqlSugar
@using CodeGeneratorForm
@{
    Table table = Model;
    List<ColumnInfo> columnInfos = table.ColumnInfos;
    string primaryKeyPropertyName="";
    string primaryKeyPropertyType="";
     foreach (var column in columnInfos)
     {
        if(column.IsPrimaryKey)
        {
            primaryKeyPropertyName=column.PropertyName;
            primaryKeyPropertyType=column.PropertyType;
            break;
        }
     }
    string firstName = table.ClassName.First().ToString().ToLower() + table.ClassName.Substring(1);
    string privateFirstName = "_" + firstName;
}
namespace 命名空间;

public class @(table.ClassName)Service : I@(table.ClassName)Service, ITransient
{
    public async Task<List<Vo@(table.ClassName)>> FindList(Vo@(table.ClassName) vo, PageModel page = null)
    {
        var queryable = DbContext.Instance
            .Queryable<@(table.ClassName)>()
            @foreach (var column in columnInfos)
            {
            @:.WhereIF(vo.@(column.PropertyName)!=null,(t)=>t.@(column.PropertyName)==vo.@(column.PropertyName))
            }
            .OrderByIF(!string.IsNullOrWhiteSpace(vo.OrderByStr), vo.OrderByStr);
        List<@(table.ClassName)> list;
        if (page != null)
        {
            RefAsync<int> total = 0;
            list = await queryable.ToPageListAsync(page.PageIndex, page.PageSize, total);
            page.TotalCount = total;
        }
        else
        {
            list = await queryable.ToListAsync();
        }

        return list.Adapt<List<Vo@(table.ClassName)>>();
    }

    public async Task<long> Insert(Vo@(table.ClassName) vo)
    {
        return await DbContext.Instance
            .Insertable(vo.Adapt<@(table.ClassName)>())
            .IgnoreColumns(true)
            .ExecuteReturnSnowflakeIdAsync();
    }

    public async Task<List<long>> InsertBatch(List<Vo@(table.ClassName)> vos)
    {
        return await DbContext.Instance
            .Insertable(vos.Adapt<List<@(table.ClassName)>>())
            .ExecuteReturnSnowflakeIdListAsync();
    }

    public async Task<int> UpdateBatch(List<Vo@(table.ClassName)> vos)
    {
        return await DbContext.Instance
            .Updateable(vos.Adapt<List<@(table.ClassName)>>())
            .ExecuteCommandAsync();
    }

    public async Task<int> Update(Vo@(table.ClassName) vo)
    {
        return await DbContext.Instance
            .Updateable(vo.Adapt<@(table.ClassName)>())
            .IgnoreColumns(true)
            .ExecuteCommandAsync();
    }
}