@using  System
@using  System.Collections.Generic
@using  System.IO
@using  System.Linq
@using  SqlSugar
@using  CodeGeneratorForm
@{
    Table table =Model;
    string firstName=table.ClassName.First().ToString().ToLower() + table.ClassName.Substring(1);
    string privateFirstName = "_" + firstName;
}
namespace 命名空间;

/// <summary>
///     @(table.TableComment)服务接口
/// </summary>
public class @(table.ClassName)AppService : IDynamicApiController
{
    private readonly I@(table.ClassName)Service _@(firstName)Service;

    public @(table.ClassName)AppService(I@(table.ClassName)Service @(firstName)Service)
    {
        _@(firstName)Service = @(firstName)Service;
    }

    /// <summary>
    ///     查询分页
    /// </summary>
    /// <param name="vo">业务参数</param>
    /// <param name="page">分页信息</param>
    /// <returns>分页数据</returns>
    public async Task<TablePage> FindPage(Vo@(table.ClassName) vo, PageModel page)
    {
        TablePage tablePage = new()
        {
            List = await _@(firstName)Service.FindList(vo, page),
            Page = page
        };
        return tablePage;
    }

    /// <summary>
    ///     查询集合
    /// </summary>
    /// <param name="vo">业务参数</param>
    /// <returns>集合</returns>
    public async Task<List<Vo@(table.ClassName)>> FindList(Vo@(table.ClassName) vo)
    {
        return await _@(firstName)Service.FindList(vo);
    }

    /// <summary>
    ///     修改  忽略null 值
    /// </summary>
    /// <param name="vo">业务参数</param>
    /// <returns>是否操作成功</returns>
    public async Task<bool> Update(Vo@(table.ClassName) vo)
    {
        return await _@(firstName)Service.Update(vo) > 0;
    }

    /// <summary>
    ///     批量修改  不忽略null 值
    /// </summary>
    /// <param name="vos">业务参数</param>
    /// <returns>是否操作成功</returns>
    public async Task<bool> UpdateBatch(List<Vo@(table.ClassName)> vos)
    {
        return await _@(firstName)Service.UpdateBatch(vos) > 0;
    }

    /// <summary>
    ///     添加  忽略null 值
    /// </summary>
    /// <param name="vo">业务参数</param>
    /// <returns>返回id</returns>
    public async Task<long> Insert(Vo@(table.ClassName) vo)
    {
        return await _@(firstName)Service.Insert(vo);
    }

    /// <summary>
    ///     批量添加  不忽略null 值
    /// </summary>
    /// <param name="vos">业务参数</param>
    /// <returns>返回id集合</returns>
    public async Task<List<long>> InsertBatch(List<Vo@(table.ClassName)> vos)
    {
        return await _@(firstName)Service.InsertBatch(vos);
    }
}